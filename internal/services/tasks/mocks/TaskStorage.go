// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/10Narratives/task-tracker/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// TaskStorage is an autogenerated mock type for the TaskStorage type
type TaskStorage struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, date, title, comment, repeat
func (_m *TaskStorage) Create(ctx context.Context, date string, title string, comment string, repeat string) (int64, error) {
	ret := _m.Called(ctx, date, title, comment, repeat)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (int64, error)); ok {
		return rf(ctx, date, title, comment, repeat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) int64); ok {
		r0 = rf(ctx, date, title, comment, repeat)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, date, title, comment, repeat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TaskStorage) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, id
func (_m *TaskStorage) Read(ctx context.Context, id int64) (models.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (models.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.Task); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadByDate provides a mock function with given fields: ctx, date
func (_m *TaskStorage) ReadByDate(ctx context.Context, date string) ([]models.Task, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for ReadByDate")
	}

	var r0 []models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Task, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Task); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadByPayload provides a mock function with given fields: ctx, payload
func (_m *TaskStorage) ReadByPayload(ctx context.Context, payload string) ([]models.Task, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for ReadByPayload")
	}

	var r0 []models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Task, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Task); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadGroup provides a mock function with given fields: ctx
func (_m *TaskStorage) ReadGroup(ctx context.Context) ([]models.Task, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadGroup")
	}

	var r0 []models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, t
func (_m *TaskStorage) Update(ctx context.Context, t *models.Task) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskStorage creates a new instance of TaskStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskStorage {
	mock := &TaskStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
