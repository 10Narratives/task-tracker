// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TaskRegistrar is an autogenerated mock type for the TaskRegistrar type
type TaskRegistrar struct {
	mock.Mock
}

// Register provides a mock function with given fields: ctx, date, title, comment, repeat
func (_m *TaskRegistrar) Register(ctx context.Context, date string, title string, comment string, repeat string) (int64, error) {
	ret := _m.Called(ctx, date, title, comment, repeat)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (int64, error)); ok {
		return rf(ctx, date, title, comment, repeat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) int64); ok {
		r0 = rf(ctx, date, title, comment, repeat)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, date, title, comment, repeat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskRegistrar interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskRegistrar creates a new instance of TaskRegistrar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskRegistrar(t mockConstructorTestingTNewTaskRegistrar) *TaskRegistrar {
	mock := &TaskRegistrar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
